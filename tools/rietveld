#!/bin/bash

# Creates a code review on codereview.appspot.com for the current branch.
# The posted patch is a diff from the default head to this branch's head.
#
# This script supports the following workflow:
#     1.  Create a named branch and make your changes there.
#     2.  Merge changes (if any) from the default branch into your branch.
#     3.  Run this script to start a code review for your changes.
#     4.  If needed, make edits requested by the reviewer and run this again.
# 
# To use this script, specify at least one reviewer's address and optionally
# a comma-separated list of CC addresses.  For example:
#     tools/rietveld alice@google.com bob@google.com

pushd "$(dirname $0)" >/dev/null && source common.sh && popd >/dev/null

function usage() {
  echo
  echo "Usage: $0 <reviewer-addresses> [<cc-addresses>]"
  echo "    Arguments are e-mail addresses (or comma-separated lists thereof)."
  echo
  exit 1
}

# Ensure the user has specified a reviewer.
if [ -n "$1" ]; then
  true
else
  usage
fi

# Get the user's e-mail address.
if [ ! -f $HOME/.email ]; then
  echo "Which Google Account do you use to sign in to codereview.appspot.com?"
  echo -n "Your Google Account e-mail address: "
  read email
  echo $email > $HOME/.email
fi

# Figure out where we are.
EMAIL=$(cat $HOME/.email)
BRANCH=$(hg branch)
BRANCH_CS=$(hg branches | grep "^$BRANCH " | sed -e 's/^.* //')
DEFAULT_CS=$(hg branches | grep "^default " | sed -e 's/^.* //')
PARENT_CS=$(hg parent --template '{rev}:{node|short}')
ISSUE_INDEX=$HOME/.codereview_issues
if [ -f $ISSUE_INDEX ]; then
  ISSUE=$(grep "^$BRANCH " $HOME/.codereview_issues | sed -e 's/^[^ ][^ ]* \([0-9][0-9]*\) .*/\1/')
  MESSAGE=$(grep "^$BRANCH " $HOME/.codereview_issues | sed -e 's/^[^ ][^ ]* \([0-9][0-9]*\) //')
fi

echo "Current branch: $BRANCH_CS ($BRANCH)"
echo "Current revision: $PARENT_CS"
if [ -n "$ISSUE" ]; then
  echo "Existing code review: http://codereview.appspot.com/$ISSUE"
fi

# Ensure that we're on a feature branch.
if [ "$BRANCH" == default ]; then
  echo
  echo "You're on the default branch; don't commit changes here until they"
  echo "have been reviewed.  Instead, create a branch for your changes with"
  echo "'hg branch', commit them, and request a review there."
  echo
  exit 1
fi

# Ensure that we're at the head of the branch.
if [ "$BRANCH_CS" != "$PARENT_CS" ]; then
  echo
  echo "You aren't at the head of your current branch."
  echo "The branch head is $BRANCH_CS, but you are at $PARENT_CS."
  echo
  exit 1
fi

# Ensure that there are no outstanding changes.
if [ "$(hg status -m -a -r -d)" != "" ]; then
  hg commit
fi

# Ensure that this repository is up to date with changes in the default branch.
if [ "$(hg -q incoming -b default)" != "" ]; then
  echo
  echo "There are new changes in the repository for the default branch."
  echo "Please do 'hg pull' to pull in these changes, then 'hg merge default'"
  echo "to merge them into your branch before requesting a review:"
  hg -q incoming -v default
  echo
  exit 1
fi

# Ensure that this branch is up to date with changes in the default branch.
if [ "$(hg merge -P default)" != "" ]; then
  echo
  echo "There are new changes in the default branch that need to be merged."
  echo "Please do 'hg merge default' before requesting a review."
  hg merge -P default
  echo
  exit 1
fi

# Push the changes in this branch to the repository.
hg push -f

# Prepare the command-line options for the upload.py script.
OPTIONS="--rev=default -e $EMAIL --send_mail"

# Get the e-mail addresses of the reviewers.
if [ -n "$1" ]; then
  OPTIONS="$OPTIONS -r \"$1\""
else
  usage
fi

# Get the e-mail addresses for the CC list.
if [ -n "$2" ]; then
  OPTIONS="$OPTIONS --cc=\"$2\""
fi

# Add the existing issue number, if there is one.
if [ -n "$ISSUE" ]; then
  OPTIONS="$OPTIONS -i $ISSUE"
  echo "Updating review: $DEFAULT_CS (default) --> $BRANCH_CS"
else
  echo "Creating review: $DEFAULT_CS (default) --> $BRANCH_CS"
fi

# Add the existing message, if there is one, otherwise ask for a message.
if [ -n "$MESSAGE" ]; then
  echo "Adding existing patch set message: \"$MESSAGE\""
else
  # Get the change descriptions in forward order squished onto one line.
  TMP=/tmp/issue-message.$$
  echo "# Enter one-line description below.  Leave empty to cancel review." >> $TMP
  echo >> $TMP
  hg log -b "$BRANCH" -r 0:tip --template '{desc|firstline}  ' >> $TMP
  $EDITOR $TMP
  MESSAGE=$(sed -e 's/^#.*//' $TMP)
  MESSAGE=$(echo $MESSAGE)  # get rid of whitespace
  rm -f $TMP
fi

# If the message is empty, quit.
if [ -n "$MESSAGE" ]; then
  true
else
  echo "Description is empty; review cancelled."
  exit 1
fi

# Upload the code review.
echo
echo $PYTHON $TOOLS_DIR/upload.py $OPTIONS -m "\"$BRANCH: $MESSAGE\""
cd $PROJECT_DIR
TMP=/tmp/issue-number.$$
PYTHONPATH=$TOOLS_DIR $PYTHON -c "
import upload
cmd = ['upload.py'] + '$OPTIONS'.split() + ['-m', '$BRANCH: $MESSAGE']
issue, patchset = upload.RealMain(cmd)
print >>open('$TMP', 'w'), issue
" || exit 1

# Save the issue number and message for future use with this branch.
NEW_ISSUE=$(cat $TMP)
if [ -n "$ISSUE" ]; then
  echo
  echo "Updated review: http://codereview.appspot.com/$NEW_ISSUE"
else
  echo
  echo "Created review: http://codereview.appspot.com/$NEW_ISSUE"
  echo "$BRANCH $NEW_ISSUE $MESSAGE" >> $ISSUE_INDEX
fi
rm -f $TMP
